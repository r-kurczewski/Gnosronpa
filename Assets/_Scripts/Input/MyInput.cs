//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/_Scripts/Input/MyInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Gnosronpa.Input
{
    public partial class @MyInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MyInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInput"",
    ""maps"": [
        {
            ""name"": ""Nonstop Debate"",
            ""id"": ""6a8c1e55-519a-41b9-a19f-819d2843a6fe"",
            ""actions"": [
                {
                    ""name"": ""CursorPos"",
                    ""type"": ""Value"",
                    ""id"": ""dfdd6c8d-0dbc-4eff-974f-a4ea6cf10784"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""10f5d7bf-4d06-41f0-bb14-68eebdddb970"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickBullet"",
                    ""type"": ""Button"",
                    ""id"": ""aa1c40f4-868b-4a9d-a0c0-4307048ffdc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeBullet"",
                    ""type"": ""Value"",
                    ""id"": ""68019e35-a816-4b2f-b660-4462ddfbf528"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slowdown"",
                    ""type"": ""Button"",
                    ""id"": ""b0cb2570-0dfe-46cc-ae25-e9d95712a539"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rewind"",
                    ""type"": ""Button"",
                    ""id"": ""90b12413-4079-4658-a2d3-76a83e985604"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextDialog"",
                    ""type"": ""Button"",
                    ""id"": ""968d265b-ef2e-4ad3-9e72-ad622924d18d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""317f40c6-aab8-4366-b3c5-7cd94b13d152"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeBulletDescription"",
                    ""type"": ""Value"",
                    ""id"": ""a4c8e075-0e92-4bf6-945c-86adc60ff28f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d60b220-3636-4262-8d74-ae0d198f7237"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""95ab8dcc-5b87-4f38-9a57-bf82bdd58aaf"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBullet"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""2ebcdd0b-6ff3-49eb-8e8f-4c47343f5d85"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""76bb583c-b8da-4307-bc1f-2826d79c7f47"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b49ca4a-ff61-446a-b6b9-01eeb46dafae"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rewind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""355ab9fb-333f-4d48-acd5-fca70b010d05"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c38e7a-1d25-437c-993d-6a4ef12c09be"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0fc8591-fe60-4500-a71a-28bf182817bd"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f847835-7a98-4918-a1b1-e8c062a306cd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a2ba8ae-4573-4411-af10-cad20ba26d8e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baa92124-a50c-44d3-924e-cdc18dab869d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slowdown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bac27bd8-135e-4e70-9fad-6823b1db5e04"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBulletDescription"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8a52f991-def3-4bf1-800e-396d5fc5325a"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBulletDescription"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4bf02e94-91c3-439b-9187-77f8c36be962"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBulletDescription"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""66dacd41-2be7-4b55-8487-eabcd8b4dbda"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBulletDescription"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d5f7df70-9037-4ace-af84-28f618617d9f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBulletDescription"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""885a85c9-e419-4810-ba5d-b38543ba8900"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
            // Nonstop Debate
            m_NonstopDebate = asset.FindActionMap("Nonstop Debate", throwIfNotFound: true);
            m_NonstopDebate_CursorPos = m_NonstopDebate.FindAction("CursorPos", throwIfNotFound: true);
            m_NonstopDebate_Shoot = m_NonstopDebate.FindAction("Shoot", throwIfNotFound: true);
            m_NonstopDebate_PickBullet = m_NonstopDebate.FindAction("PickBullet", throwIfNotFound: true);
            m_NonstopDebate_ChangeBullet = m_NonstopDebate.FindAction("ChangeBullet", throwIfNotFound: true);
            m_NonstopDebate_Slowdown = m_NonstopDebate.FindAction("Slowdown", throwIfNotFound: true);
            m_NonstopDebate_Rewind = m_NonstopDebate.FindAction("Rewind", throwIfNotFound: true);
            m_NonstopDebate_NextDialog = m_NonstopDebate.FindAction("NextDialog", throwIfNotFound: true);
            m_NonstopDebate_Menu = m_NonstopDebate.FindAction("Menu", throwIfNotFound: true);
            m_NonstopDebate_ChangeBulletDescription = m_NonstopDebate.FindAction("ChangeBulletDescription", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Nonstop Debate
        private readonly InputActionMap m_NonstopDebate;
        private List<INonstopDebateActions> m_NonstopDebateActionsCallbackInterfaces = new List<INonstopDebateActions>();
        private readonly InputAction m_NonstopDebate_CursorPos;
        private readonly InputAction m_NonstopDebate_Shoot;
        private readonly InputAction m_NonstopDebate_PickBullet;
        private readonly InputAction m_NonstopDebate_ChangeBullet;
        private readonly InputAction m_NonstopDebate_Slowdown;
        private readonly InputAction m_NonstopDebate_Rewind;
        private readonly InputAction m_NonstopDebate_NextDialog;
        private readonly InputAction m_NonstopDebate_Menu;
        private readonly InputAction m_NonstopDebate_ChangeBulletDescription;
        public struct NonstopDebateActions
        {
            private @MyInput m_Wrapper;
            public NonstopDebateActions(@MyInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @CursorPos => m_Wrapper.m_NonstopDebate_CursorPos;
            public InputAction @Shoot => m_Wrapper.m_NonstopDebate_Shoot;
            public InputAction @PickBullet => m_Wrapper.m_NonstopDebate_PickBullet;
            public InputAction @ChangeBullet => m_Wrapper.m_NonstopDebate_ChangeBullet;
            public InputAction @Slowdown => m_Wrapper.m_NonstopDebate_Slowdown;
            public InputAction @Rewind => m_Wrapper.m_NonstopDebate_Rewind;
            public InputAction @NextDialog => m_Wrapper.m_NonstopDebate_NextDialog;
            public InputAction @Menu => m_Wrapper.m_NonstopDebate_Menu;
            public InputAction @ChangeBulletDescription => m_Wrapper.m_NonstopDebate_ChangeBulletDescription;
            public InputActionMap Get() { return m_Wrapper.m_NonstopDebate; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NonstopDebateActions set) { return set.Get(); }
            public void AddCallbacks(INonstopDebateActions instance)
            {
                if (instance == null || m_Wrapper.m_NonstopDebateActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NonstopDebateActionsCallbackInterfaces.Add(instance);
                @CursorPos.started += instance.OnCursorPos;
                @CursorPos.performed += instance.OnCursorPos;
                @CursorPos.canceled += instance.OnCursorPos;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @PickBullet.started += instance.OnPickBullet;
                @PickBullet.performed += instance.OnPickBullet;
                @PickBullet.canceled += instance.OnPickBullet;
                @ChangeBullet.started += instance.OnChangeBullet;
                @ChangeBullet.performed += instance.OnChangeBullet;
                @ChangeBullet.canceled += instance.OnChangeBullet;
                @Slowdown.started += instance.OnSlowdown;
                @Slowdown.performed += instance.OnSlowdown;
                @Slowdown.canceled += instance.OnSlowdown;
                @Rewind.started += instance.OnRewind;
                @Rewind.performed += instance.OnRewind;
                @Rewind.canceled += instance.OnRewind;
                @NextDialog.started += instance.OnNextDialog;
                @NextDialog.performed += instance.OnNextDialog;
                @NextDialog.canceled += instance.OnNextDialog;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @ChangeBulletDescription.started += instance.OnChangeBulletDescription;
                @ChangeBulletDescription.performed += instance.OnChangeBulletDescription;
                @ChangeBulletDescription.canceled += instance.OnChangeBulletDescription;
            }

            private void UnregisterCallbacks(INonstopDebateActions instance)
            {
                @CursorPos.started -= instance.OnCursorPos;
                @CursorPos.performed -= instance.OnCursorPos;
                @CursorPos.canceled -= instance.OnCursorPos;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @PickBullet.started -= instance.OnPickBullet;
                @PickBullet.performed -= instance.OnPickBullet;
                @PickBullet.canceled -= instance.OnPickBullet;
                @ChangeBullet.started -= instance.OnChangeBullet;
                @ChangeBullet.performed -= instance.OnChangeBullet;
                @ChangeBullet.canceled -= instance.OnChangeBullet;
                @Slowdown.started -= instance.OnSlowdown;
                @Slowdown.performed -= instance.OnSlowdown;
                @Slowdown.canceled -= instance.OnSlowdown;
                @Rewind.started -= instance.OnRewind;
                @Rewind.performed -= instance.OnRewind;
                @Rewind.canceled -= instance.OnRewind;
                @NextDialog.started -= instance.OnNextDialog;
                @NextDialog.performed -= instance.OnNextDialog;
                @NextDialog.canceled -= instance.OnNextDialog;
                @Menu.started -= instance.OnMenu;
                @Menu.performed -= instance.OnMenu;
                @Menu.canceled -= instance.OnMenu;
                @ChangeBulletDescription.started -= instance.OnChangeBulletDescription;
                @ChangeBulletDescription.performed -= instance.OnChangeBulletDescription;
                @ChangeBulletDescription.canceled -= instance.OnChangeBulletDescription;
            }

            public void RemoveCallbacks(INonstopDebateActions instance)
            {
                if (m_Wrapper.m_NonstopDebateActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INonstopDebateActions instance)
            {
                foreach (var item in m_Wrapper.m_NonstopDebateActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NonstopDebateActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NonstopDebateActions @NonstopDebate => new NonstopDebateActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
        public struct MenuActions
        {
            private @MyInput m_Wrapper;
            public MenuActions(@MyInput wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void AddCallbacks(IMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            }

            private void UnregisterCallbacks(IMenuActions instance)
            {
            }

            public void RemoveCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MenuActions @Menu => new MenuActions(this);
        public interface INonstopDebateActions
        {
            void OnCursorPos(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnPickBullet(InputAction.CallbackContext context);
            void OnChangeBullet(InputAction.CallbackContext context);
            void OnSlowdown(InputAction.CallbackContext context);
            void OnRewind(InputAction.CallbackContext context);
            void OnNextDialog(InputAction.CallbackContext context);
            void OnMenu(InputAction.CallbackContext context);
            void OnChangeBulletDescription(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
        }
    }
}
